// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: instrument.sql

package db

import (
	"context"
)

const getInstrumentsByRef = `-- name: GetInstrumentsByRef :one
SELECT instr_instref, instr_instgrp, instr_longdesc, instr_denminst, instr_pricedps, instr_divisor, instr_multiplier, instr_pricetype, instr_tick, instr_accrued, instr_minqty, instr_qtydps, instr_shrtdesc, instr_market, instr_settinst, instr_book, instr_maxmovt, instr_minmovt, instr_active, instr_verdat
FROM instr_instruments WHERE instr_instref = $1
ORDER BY instr_instref
`

func (q *Queries) GetInstrumentsByRef(ctx context.Context, instrInstref string) (InstrInstrument, error) {
	row := q.db.QueryRowContext(ctx, getInstrumentsByRef, instrInstref)
	var i InstrInstrument
	err := row.Scan(
		&i.InstrInstref,
		&i.InstrInstgrp,
		&i.InstrLongdesc,
		&i.InstrDenminst,
		&i.InstrPricedps,
		&i.InstrDivisor,
		&i.InstrMultiplier,
		&i.InstrPricetype,
		&i.InstrTick,
		&i.InstrAccrued,
		&i.InstrMinqty,
		&i.InstrQtydps,
		&i.InstrShrtdesc,
		&i.InstrMarket,
		&i.InstrSettinst,
		&i.InstrBook,
		&i.InstrMaxmovt,
		&i.InstrMinmovt,
		&i.InstrActive,
		&i.InstrVerdat,
	)
	return i, err
}

const listInstruments = `-- name: ListInstruments :many
SELECT instr_instref, instr_instgrp, instr_longdesc, instr_denminst, instr_pricedps, instr_divisor, instr_multiplier, instr_pricetype, instr_tick, instr_accrued, instr_minqty, instr_qtydps, instr_shrtdesc, instr_market, instr_settinst, instr_book, instr_maxmovt, instr_minmovt, instr_active, instr_verdat
FROM instr_instruments
LIMIT 10000
`

func (q *Queries) ListInstruments(ctx context.Context) ([]InstrInstrument, error) {
	rows, err := q.db.QueryContext(ctx, listInstruments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InstrInstrument{}
	for rows.Next() {
		var i InstrInstrument
		if err := rows.Scan(
			&i.InstrInstref,
			&i.InstrInstgrp,
			&i.InstrLongdesc,
			&i.InstrDenminst,
			&i.InstrPricedps,
			&i.InstrDivisor,
			&i.InstrMultiplier,
			&i.InstrPricetype,
			&i.InstrTick,
			&i.InstrAccrued,
			&i.InstrMinqty,
			&i.InstrQtydps,
			&i.InstrShrtdesc,
			&i.InstrMarket,
			&i.InstrSettinst,
			&i.InstrBook,
			&i.InstrMaxmovt,
			&i.InstrMinmovt,
			&i.InstrActive,
			&i.InstrVerdat,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
