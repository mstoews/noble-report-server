// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: trades.sql

package db

import (
	"context"
	"time"
)

const createInstExt = `-- name: CreateInstExt :one
insert into trd_inst_ext (trd_recordno,
                          trd_service, 
                          trd_extref)
values ($1,$2, $3)
RETURNING trd_recordno, trd_service, trd_extref
`

type CreateInstExtParams struct {
	TrdRecordno int32  `json:"trd_recordno"`
	TrdService  string `json:"trd_service"`
	TrdExtref   string `json:"trd_extref"`
}

func (q *Queries) CreateInstExt(ctx context.Context, arg CreateInstExtParams) (TrdInstExt, error) {
	row := q.db.QueryRowContext(ctx, createInstExt, arg.TrdRecordno, arg.TrdService, arg.TrdExtref)
	var i TrdInstExt
	err := row.Scan(&i.TrdRecordno, &i.TrdService, &i.TrdExtref)
	return i, err
}

const createInstructionEffect = `-- name: CreateInstructionEffect :one
insert into trd_instruction_effect (trd_recordno, 
                                    trd_eventtype, 
                                    trd_eventdate, 
                                    trd_eventdateto, 
                                    trd_entrydatetime,
                                    trd_eventcode, 
                                    trd_exceptiontype, 
                                    trd_expirydate)
values ($1,$2, $3, $4, $5, $6, $7, $8)
RETURNING trd_recordno, trd_eventtype, trd_eventdate, trd_eventdateto, trd_entrydatetime, trd_eventcode, trd_exceptiontype, trd_expirydate
`

type CreateInstructionEffectParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	TrdEventtype     string `json:"trd_eventtype"`
	TrdEventdate     string `json:"trd_eventdate"`
	TrdEventdateto   string `json:"trd_eventdateto"`
	TrdEntrydatetime string `json:"trd_entrydatetime"`
	TrdEventcode     string `json:"trd_eventcode"`
	TrdExceptiontype string `json:"trd_exceptiontype"`
	TrdExpirydate    string `json:"trd_expirydate"`
}

func (q *Queries) CreateInstructionEffect(ctx context.Context, arg CreateInstructionEffectParams) (TrdInstructionEffect, error) {
	row := q.db.QueryRowContext(ctx, createInstructionEffect,
		arg.TrdRecordno,
		arg.TrdEventtype,
		arg.TrdEventdate,
		arg.TrdEventdateto,
		arg.TrdEntrydatetime,
		arg.TrdEventcode,
		arg.TrdExceptiontype,
		arg.TrdExpirydate,
	)
	var i TrdInstructionEffect
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdEventtype,
		&i.TrdEventdate,
		&i.TrdEventdateto,
		&i.TrdEntrydatetime,
		&i.TrdEventcode,
		&i.TrdExceptiontype,
		&i.TrdExpirydate,
	)
	return i, err
}

const createInstrument = `-- name: CreateInstrument :one
insert into trd_instrument (trd_recordno, 
                            trd_instrtype, 
                            trd_p2000instrref, 
                            trd_instrreftype, 
                            trd_instrref,
                            trd_longname, 
                            trd_quantity)
values ($1,$2, $3, $4, $5, $6, $7)
RETURNING trd_recordno, trd_instrtype, trd_p2000instrref, trd_instrreftype, trd_instrref, trd_longname, trd_quantity
`

type CreateInstrumentParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	TrdInstrtype     string `json:"trd_instrtype"`
	TrdP2000instrref string `json:"trd_p2000instrref"`
	TrdInstrreftype  string `json:"trd_instrreftype"`
	TrdInstrref      string `json:"trd_instrref"`
	TrdLongname      string `json:"trd_longname"`
	TrdQuantity      string `json:"trd_quantity"`
}

func (q *Queries) CreateInstrument(ctx context.Context, arg CreateInstrumentParams) (TrdInstrument, error) {
	row := q.db.QueryRowContext(ctx, createInstrument,
		arg.TrdRecordno,
		arg.TrdInstrtype,
		arg.TrdP2000instrref,
		arg.TrdInstrreftype,
		arg.TrdInstrref,
		arg.TrdLongname,
		arg.TrdQuantity,
	)
	var i TrdInstrument
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdInstrtype,
		&i.TrdP2000instrref,
		&i.TrdInstrreftype,
		&i.TrdInstrref,
		&i.TrdLongname,
		&i.TrdQuantity,
	)
	return i, err
}

const createJournal = `-- name: CreateJournal :one
insert into trd_journal (trd_recordno, 
                         trd_accounts_company, 
                         trd_journal_type, 
                         trd_posting_type, 
                         trd_journal_no,
                         trd_procaction)
values ($1,$2, $3, $4, $5, $6)
RETURNING trd_recordno, trd_accounts_company, trd_journal_type, trd_posting_type, trd_journal_no, trd_procaction
`

type CreateJournalParams struct {
	TrdRecordno        int32  `json:"trd_recordno"`
	TrdAccountsCompany string `json:"trd_accounts_company"`
	TrdJournalType     string `json:"trd_journal_type"`
	TrdPostingType     string `json:"trd_posting_type"`
	TrdJournalNo       string `json:"trd_journal_no"`
	TrdProcaction      string `json:"trd_procaction"`
}

func (q *Queries) CreateJournal(ctx context.Context, arg CreateJournalParams) (TrdJournal, error) {
	row := q.db.QueryRowContext(ctx, createJournal,
		arg.TrdRecordno,
		arg.TrdAccountsCompany,
		arg.TrdJournalType,
		arg.TrdPostingType,
		arg.TrdJournalNo,
		arg.TrdProcaction,
	)
	var i TrdJournal
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdAccountsCompany,
		&i.TrdJournalType,
		&i.TrdPostingType,
		&i.TrdJournalNo,
		&i.TrdProcaction,
	)
	return i, err
}

const createLink = `-- name: CreateLink :one
insert into trd_link (trd_recordno, 
                      trd_link_type_wil, 
                      trd_main_record_no_wil, 
                      trd_sub_recordno_wil, 
                      trd_link_qty_wil,
                      trd_link_status_wil)
values ($1,$2, $3, $4, $5, $6)
RETURNING trd_recordno, trd_link_type_wil, trd_main_record_no_wil, trd_sub_recordno_wil, trd_link_qty_wil, trd_link_status_wil
`

type CreateLinkParams struct {
	TrdRecordno        int32  `json:"trd_recordno"`
	TrdLinkTypeWil     string `json:"trd_link_type_wil"`
	TrdMainRecordNoWil string `json:"trd_main_record_no_wil"`
	TrdSubRecordnoWil  string `json:"trd_sub_recordno_wil"`
	TrdLinkQtyWil      string `json:"trd_link_qty_wil"`
	TrdLinkStatusWil   string `json:"trd_link_status_wil"`
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (TrdLink, error) {
	row := q.db.QueryRowContext(ctx, createLink,
		arg.TrdRecordno,
		arg.TrdLinkTypeWil,
		arg.TrdMainRecordNoWil,
		arg.TrdSubRecordnoWil,
		arg.TrdLinkQtyWil,
		arg.TrdLinkStatusWil,
	)
	var i TrdLink
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdLinkTypeWil,
		&i.TrdMainRecordNoWil,
		&i.TrdSubRecordnoWil,
		&i.TrdLinkQtyWil,
		&i.TrdLinkStatusWil,
	)
	return i, err
}

const createParty = `-- name: CreateParty :one
insert into trd_party (trd_recordno, 
                       trd_trade_party, 
                       trd_partyref, 
                       trd_partyref_type_text, 
                       trd_ext_partyref,
                       trd_longname)
values ($1,$2, $3, $4, $5, $6)
RETURNING trd_recordno, trd_trade_party, trd_partyref, trd_partyref_type_text, trd_ext_partyref, trd_longname
`

type CreatePartyParams struct {
	TrdRecordno         int32  `json:"trd_recordno"`
	TrdTradeParty       string `json:"trd_trade_party"`
	TrdPartyref         string `json:"trd_partyref"`
	TrdPartyrefTypeText string `json:"trd_partyref_type_text"`
	TrdExtPartyref      string `json:"trd_ext_partyref"`
	TrdLongname         string `json:"trd_longname"`
}

func (q *Queries) CreateParty(ctx context.Context, arg CreatePartyParams) (TrdParty, error) {
	row := q.db.QueryRowContext(ctx, createParty,
		arg.TrdRecordno,
		arg.TrdTradeParty,
		arg.TrdPartyref,
		arg.TrdPartyrefTypeText,
		arg.TrdExtPartyref,
		arg.TrdLongname,
	)
	var i TrdParty
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdTradeParty,
		&i.TrdPartyref,
		&i.TrdPartyrefTypeText,
		&i.TrdExtPartyref,
		&i.TrdLongname,
	)
	return i, err
}

const createPartyDriver = `-- name: CreatePartyDriver :one
insert into trd_party_driver (trd_recordno, 
                              trd_trade_party, 
                              trd_driver_type, 
                              trd_driver_code)
values ($1,$2, $3, $4)
RETURNING trd_recordno, trd_trade_party, trd_driver_type, trd_driver_code
`

type CreatePartyDriverParams struct {
	TrdRecordno   int32  `json:"trd_recordno"`
	TrdTradeParty string `json:"trd_trade_party"`
	TrdDriverType string `json:"trd_driver_type"`
	TrdDriverCode string `json:"trd_driver_code"`
}

func (q *Queries) CreatePartyDriver(ctx context.Context, arg CreatePartyDriverParams) (TrdPartyDriver, error) {
	row := q.db.QueryRowContext(ctx, createPartyDriver,
		arg.TrdRecordno,
		arg.TrdTradeParty,
		arg.TrdDriverType,
		arg.TrdDriverCode,
	)
	var i TrdPartyDriver
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdTradeParty,
		&i.TrdDriverType,
		&i.TrdDriverCode,
	)
	return i, err
}

const createProcessing = `-- name: CreateProcessing :one
insert into trd_processing (trd_recordno,
                            trd_proc_alias, 
                            trd_proc_action, 
                            trd_due_datetime, 
                            trd_done_datetime)
values ($1,$2, $3, $4, $5)
RETURNING trd_recordno, trd_proc_alias, trd_proc_action, trd_due_datetime, trd_done_datetime
`

type CreateProcessingParams struct {
	TrdRecordno     int32  `json:"trd_recordno"`
	TrdProcAlias    string `json:"trd_proc_alias"`
	TrdProcAction   string `json:"trd_proc_action"`
	TrdDueDatetime  string `json:"trd_due_datetime"`
	TrdDoneDatetime string `json:"trd_done_datetime"`
}

func (q *Queries) CreateProcessing(ctx context.Context, arg CreateProcessingParams) (TrdProcessing, error) {
	row := q.db.QueryRowContext(ctx, createProcessing,
		arg.TrdRecordno,
		arg.TrdProcAlias,
		arg.TrdProcAction,
		arg.TrdDueDatetime,
		arg.TrdDoneDatetime,
	)
	var i TrdProcessing
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdProcAlias,
		&i.TrdProcAction,
		&i.TrdDueDatetime,
		&i.TrdDoneDatetime,
	)
	return i, err
}

const createProcessingEvent = `-- name: CreateProcessingEvent :one
insert into trd_processing_event (trd_recordno, 
                                  trd_eventtype, 
                                  trd_eventdate, 
                                  trd_eventdateto, 
                                  trd_entrydatetime,
                                  trd_eventcode, 
                                  trd_exceptiontype, 
                                  trd_expirydate)
values ($1,$2, $3, $4, $5, $6, $7, $8)
RETURNING trd_recordno, trd_eventtype, trd_eventdate, trd_eventdateto, trd_entrydatetime, trd_eventcode, trd_exceptiontype, trd_expirydate
`

type CreateProcessingEventParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	TrdEventtype     string `json:"trd_eventtype"`
	TrdEventdate     string `json:"trd_eventdate"`
	TrdEventdateto   string `json:"trd_eventdateto"`
	TrdEntrydatetime string `json:"trd_entrydatetime"`
	TrdEventcode     string `json:"trd_eventcode"`
	TrdExceptiontype string `json:"trd_exceptiontype"`
	TrdExpirydate    string `json:"trd_expirydate"`
}

func (q *Queries) CreateProcessingEvent(ctx context.Context, arg CreateProcessingEventParams) (TrdProcessingEvent, error) {
	row := q.db.QueryRowContext(ctx, createProcessingEvent,
		arg.TrdRecordno,
		arg.TrdEventtype,
		arg.TrdEventdate,
		arg.TrdEventdateto,
		arg.TrdEntrydatetime,
		arg.TrdEventcode,
		arg.TrdExceptiontype,
		arg.TrdExpirydate,
	)
	var i TrdProcessingEvent
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdEventtype,
		&i.TrdEventdate,
		&i.TrdEventdateto,
		&i.TrdEntrydatetime,
		&i.TrdEventcode,
		&i.TrdExceptiontype,
		&i.TrdExpirydate,
	)
	return i, err
}

const createRate = `-- name: CreateRate :one
insert into trd_rate (trd_recordno, 
                      trd_charge_levy_type, 
                      trd_actual_charge, 
                      trd_amount_type, 
                      trd_rate_instrref_type,
                      trd_rate_instrref, 
                      trd_rate_instrid, 
                      trd_rate_entered, 
                      trd_charge_rate, 
                      trd_mult_divind)
values ($1,$2, $3, $4, $5, $6, $7, $8, $9, $10)
RETURNING trd_recordno, trd_charge_levy_type, trd_actual_charge, trd_amount_type, trd_rate_instrref_type, trd_rate_instrref, trd_rate_instrid, trd_rate_entered, trd_charge_rate, trd_mult_divind
`

type CreateRateParams struct {
	TrdRecordno         int32  `json:"trd_recordno"`
	TrdChargeLevyType   string `json:"trd_charge_levy_type"`
	TrdActualCharge     string `json:"trd_actual_charge"`
	TrdAmountType       string `json:"trd_amount_type"`
	TrdRateInstrrefType string `json:"trd_rate_instrref_type"`
	TrdRateInstrref     string `json:"trd_rate_instrref"`
	TrdRateInstrid      string `json:"trd_rate_instrid"`
	TrdRateEntered      string `json:"trd_rate_entered"`
	TrdChargeRate       string `json:"trd_charge_rate"`
	TrdMultDivind       string `json:"trd_mult_divind"`
}

func (q *Queries) CreateRate(ctx context.Context, arg CreateRateParams) (TrdRate, error) {
	row := q.db.QueryRowContext(ctx, createRate,
		arg.TrdRecordno,
		arg.TrdChargeLevyType,
		arg.TrdActualCharge,
		arg.TrdAmountType,
		arg.TrdRateInstrrefType,
		arg.TrdRateInstrref,
		arg.TrdRateInstrid,
		arg.TrdRateEntered,
		arg.TrdChargeRate,
		arg.TrdMultDivind,
	)
	var i TrdRate
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdChargeLevyType,
		&i.TrdActualCharge,
		&i.TrdAmountType,
		&i.TrdRateInstrrefType,
		&i.TrdRateInstrref,
		&i.TrdRateInstrid,
		&i.TrdRateEntered,
		&i.TrdChargeRate,
		&i.TrdMultDivind,
	)
	return i, err
}

const createRefDate = `-- name: CreateRefDate :one
insert into trd_ref_date (trd_recordno, 
                          datetype, 
                          datewil, 
                          refdatetime, 
                          dateversionuser)
values ($1,$2, $3, $4, $5)
RETURNING trd_recordno, datetype, datewil, refdatetime, dateversionuser
`

type CreateRefDateParams struct {
	TrdRecordno     int32     `json:"trd_recordno"`
	Datetype        string    `json:"datetype"`
	Datewil         time.Time `json:"datewil"`
	Refdatetime     string    `json:"refdatetime"`
	Dateversionuser string    `json:"dateversionuser"`
}

func (q *Queries) CreateRefDate(ctx context.Context, arg CreateRefDateParams) (TrdRefDate, error) {
	row := q.db.QueryRowContext(ctx, createRefDate,
		arg.TrdRecordno,
		arg.Datetype,
		arg.Datewil,
		arg.Refdatetime,
		arg.Dateversionuser,
	)
	var i TrdRefDate
	err := row.Scan(
		&i.TrdRecordno,
		&i.Datetype,
		&i.Datewil,
		&i.Refdatetime,
		&i.Dateversionuser,
	)
	return i, err
}

const createSettlement = `-- name: CreateSettlement :one
insert into trd_settlement (trd_recordno, 
                            trd_deliverytype, 
                            trd_settleeventinstr, 
                            trd_settleterms, 
                            trd_originalqty,
                            trd_openqty, 
                            trd_settledate, 
                            trd_delrecind, 
                            trd_settlestatus, 
                            trd_tradestatus,
                            trd_settlenarrative1, 
                            trd_settlenarrative2, 
                            trd_settlenarrative3, 
                            trd_settlenarrative4,
                            trd_settlenarrative5, 
                            trd_settlenarrative6, 
                            trd_settlenarrative7, 
                            trd_settlenarrative8,
                            trd_dompaliaswil, 
                            trd_dompaliasdesc, 
                            trd_dompdepottypewil, 
                            trd_dompdaccwil,
                            trd_dompservicewil, 
                            trd_secpaliaswil, 
                            trd_secpservicewil)
values ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10,$11, $12, $13, $14, $15, $16, $17, $18, $19, $20,$21, $22, $23, $24, $25)
RETURNING trd_recordno, trd_deliverytype, trd_settleeventinstr, trd_settleterms, trd_originalqty, trd_openqty, trd_settledate, trd_delrecind, trd_settlestatus, trd_tradestatus, trd_settlenarrative1, trd_settlenarrative2, trd_settlenarrative3, trd_settlenarrative4, trd_settlenarrative5, trd_settlenarrative6, trd_settlenarrative7, trd_settlenarrative8, trd_dompaliaswil, trd_dompaliasdesc, trd_dompdepottypewil, trd_dompdaccwil, trd_dompservicewil, trd_secpaliaswil, trd_secpservicewil
`

type CreateSettlementParams struct {
	TrdRecordno         int32  `json:"trd_recordno"`
	TrdDeliverytype     string `json:"trd_deliverytype"`
	TrdSettleeventinstr string `json:"trd_settleeventinstr"`
	TrdSettleterms      string `json:"trd_settleterms"`
	TrdOriginalqty      string `json:"trd_originalqty"`
	TrdOpenqty          string `json:"trd_openqty"`
	TrdSettledate       string `json:"trd_settledate"`
	TrdDelrecind        string `json:"trd_delrecind"`
	TrdSettlestatus     string `json:"trd_settlestatus"`
	TrdTradestatus      string `json:"trd_tradestatus"`
	TrdSettlenarrative1 string `json:"trd_settlenarrative1"`
	TrdSettlenarrative2 string `json:"trd_settlenarrative2"`
	TrdSettlenarrative3 string `json:"trd_settlenarrative3"`
	TrdSettlenarrative4 string `json:"trd_settlenarrative4"`
	TrdSettlenarrative5 string `json:"trd_settlenarrative5"`
	TrdSettlenarrative6 string `json:"trd_settlenarrative6"`
	TrdSettlenarrative7 string `json:"trd_settlenarrative7"`
	TrdSettlenarrative8 string `json:"trd_settlenarrative8"`
	TrdDompaliaswil     string `json:"trd_dompaliaswil"`
	TrdDompaliasdesc    string `json:"trd_dompaliasdesc"`
	TrdDompdepottypewil string `json:"trd_dompdepottypewil"`
	TrdDompdaccwil      string `json:"trd_dompdaccwil"`
	TrdDompservicewil   string `json:"trd_dompservicewil"`
	TrdSecpaliaswil     string `json:"trd_secpaliaswil"`
	TrdSecpservicewil   string `json:"trd_secpservicewil"`
}

func (q *Queries) CreateSettlement(ctx context.Context, arg CreateSettlementParams) (TrdSettlement, error) {
	row := q.db.QueryRowContext(ctx, createSettlement,
		arg.TrdRecordno,
		arg.TrdDeliverytype,
		arg.TrdSettleeventinstr,
		arg.TrdSettleterms,
		arg.TrdOriginalqty,
		arg.TrdOpenqty,
		arg.TrdSettledate,
		arg.TrdDelrecind,
		arg.TrdSettlestatus,
		arg.TrdTradestatus,
		arg.TrdSettlenarrative1,
		arg.TrdSettlenarrative2,
		arg.TrdSettlenarrative3,
		arg.TrdSettlenarrative4,
		arg.TrdSettlenarrative5,
		arg.TrdSettlenarrative6,
		arg.TrdSettlenarrative7,
		arg.TrdSettlenarrative8,
		arg.TrdDompaliaswil,
		arg.TrdDompaliasdesc,
		arg.TrdDompdepottypewil,
		arg.TrdDompdaccwil,
		arg.TrdDompservicewil,
		arg.TrdSecpaliaswil,
		arg.TrdSecpservicewil,
	)
	var i TrdSettlement
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdDeliverytype,
		&i.TrdSettleeventinstr,
		&i.TrdSettleterms,
		&i.TrdOriginalqty,
		&i.TrdOpenqty,
		&i.TrdSettledate,
		&i.TrdDelrecind,
		&i.TrdSettlestatus,
		&i.TrdTradestatus,
		&i.TrdSettlenarrative1,
		&i.TrdSettlenarrative2,
		&i.TrdSettlenarrative3,
		&i.TrdSettlenarrative4,
		&i.TrdSettlenarrative5,
		&i.TrdSettlenarrative6,
		&i.TrdSettlenarrative7,
		&i.TrdSettlenarrative8,
		&i.TrdDompaliaswil,
		&i.TrdDompaliasdesc,
		&i.TrdDompdepottypewil,
		&i.TrdDompdaccwil,
		&i.TrdDompservicewil,
		&i.TrdSecpaliaswil,
		&i.TrdSecpservicewil,
	)
	return i, err
}

const createTrade = `-- name: CreateTrade :one
INSERT INTO trd_trade (
        trd_recordno,
        trd_glosstraderef,
        trd_versiono,
        trd_origin,
        trd_tradetype,
        trd_settlementstatus,
        trd_tradestatus,
        trd_originversion
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING trd_uuid, trd_recordno, trd_glosstraderef, trd_versiono, trd_origin, trd_tradetype, trd_settlementstatus, trd_tradestatus, trd_originversion
`

type CreateTradeParams struct {
	TrdRecordno         int32  `json:"trd_recordno"`
	TrdGlosstraderef    int32  `json:"trd_glosstraderef"`
	TrdVersiono         int32  `json:"trd_versiono"`
	TrdOrigin           string `json:"trd_origin"`
	TrdTradetype        string `json:"trd_tradetype"`
	TrdSettlementstatus string `json:"trd_settlementstatus"`
	TrdTradestatus      string `json:"trd_tradestatus"`
	TrdOriginversion    int32  `json:"trd_originversion"`
}

func (q *Queries) CreateTrade(ctx context.Context, arg CreateTradeParams) (TrdTrade, error) {
	row := q.db.QueryRowContext(ctx, createTrade,
		arg.TrdRecordno,
		arg.TrdGlosstraderef,
		arg.TrdVersiono,
		arg.TrdOrigin,
		arg.TrdTradetype,
		arg.TrdSettlementstatus,
		arg.TrdTradestatus,
		arg.TrdOriginversion,
	)
	var i TrdTrade
	err := row.Scan(
		&i.TrdUuid,
		&i.TrdRecordno,
		&i.TrdGlosstraderef,
		&i.TrdVersiono,
		&i.TrdOrigin,
		&i.TrdTradetype,
		&i.TrdSettlementstatus,
		&i.TrdTradestatus,
		&i.TrdOriginversion,
	)
	return i, err
}

const createTradeNarrative = `-- name: CreateTradeNarrative :one
insert into trd_trade_narrative (trd_recordno, 
                                 trd_narrative_code, 
                                 trd_seqno, 
                                 trd_narrative)
values ($1, $2, $3, $4)
RETURNING trd_recordno, trd_narrative_code, trd_seqno, trd_narrative
`

type CreateTradeNarrativeParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	TrdNarrativeCode string `json:"trd_narrative_code"`
	TrdSeqno         string `json:"trd_seqno"`
	TrdNarrative     string `json:"trd_narrative"`
}

func (q *Queries) CreateTradeNarrative(ctx context.Context, arg CreateTradeNarrativeParams) (TrdTradeNarrative, error) {
	row := q.db.QueryRowContext(ctx, createTradeNarrative,
		arg.TrdRecordno,
		arg.TrdNarrativeCode,
		arg.TrdSeqno,
		arg.TrdNarrative,
	)
	var i TrdTradeNarrative
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdNarrativeCode,
		&i.TrdSeqno,
		&i.TrdNarrative,
	)
	return i, err
}

const createTradeOne = `-- name: CreateTradeOne :one
insert into trd_trade_code (trd_recordno, 
                            trd_ext, 
                            trd_radeclass, 
                            trd_radecode)
values ($1, $2, $3, $4)
RETURNING trd_recordno, trd_ext, trd_radeclass, trd_radecode
`

type CreateTradeOneParams struct {
	TrdRecordno  int32  `json:"trd_recordno"`
	TrdExt       string `json:"trd_ext"`
	TrdRadeclass string `json:"trd_radeclass"`
	TrdRadecode  string `json:"trd_radecode"`
}

func (q *Queries) CreateTradeOne(ctx context.Context, arg CreateTradeOneParams) (TrdTradeCode, error) {
	row := q.db.QueryRowContext(ctx, createTradeOne,
		arg.TrdRecordno,
		arg.TrdExt,
		arg.TrdRadeclass,
		arg.TrdRadecode,
	)
	var i TrdTradeCode
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdExt,
		&i.TrdRadeclass,
		&i.TrdRadecode,
	)
	return i, err
}

const createTrdAmount = `-- name: CreateTrdAmount :one
insert into trd_amount (trd_recordno,
                        trd_charge_levy_type_p2k, 
                        trd_charge_levy_instr_p2k, 
                        trd_charge_discount_wil,
                        trd_charge_levy_qty_p2k, 
                        trd_charge_levyrate_p2k)
values ($1, $2, $3, $4, $5, $6)
RETURNING trd_recordno, trd_charge_levy_type_p2k, trd_charge_levy_instr_p2k, trd_charge_discount_wil, trd_charge_levy_qty_p2k, trd_charge_levyrate_p2k
`

type CreateTrdAmountParams struct {
	TrdRecordno           int32  `json:"trd_recordno"`
	TrdChargeLevyTypeP2k  string `json:"trd_charge_levy_type_p2k"`
	TrdChargeLevyInstrP2k string `json:"trd_charge_levy_instr_p2k"`
	TrdChargeDiscountWil  string `json:"trd_charge_discount_wil"`
	TrdChargeLevyQtyP2k   string `json:"trd_charge_levy_qty_p2k"`
	TrdChargeLevyrateP2k  string `json:"trd_charge_levyrate_p2k"`
}

func (q *Queries) CreateTrdAmount(ctx context.Context, arg CreateTrdAmountParams) (TrdAmount, error) {
	row := q.db.QueryRowContext(ctx, createTrdAmount,
		arg.TrdRecordno,
		arg.TrdChargeLevyTypeP2k,
		arg.TrdChargeLevyInstrP2k,
		arg.TrdChargeDiscountWil,
		arg.TrdChargeLevyQtyP2k,
		arg.TrdChargeLevyrateP2k,
	)
	var i TrdAmount
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdChargeLevyTypeP2k,
		&i.TrdChargeLevyInstrP2k,
		&i.TrdChargeDiscountWil,
		&i.TrdChargeLevyQtyP2k,
		&i.TrdChargeLevyrateP2k,
	)
	return i, err
}

const createTrdDriver = `-- name: CreateTrdDriver :one
insert into trd_driver (trd_recordno, 
                        trd_drivertype, 
                        trd_drivercode)
values ($1, $2, $3)
RETURNING trd_recordno, trd_drivertype, trd_drivercode
`

type CreateTrdDriverParams struct {
	TrdRecordno   int32  `json:"trd_recordno"`
	TrdDrivertype string `json:"trd_drivertype"`
	TrdDrivercode string `json:"trd_drivercode"`
}

func (q *Queries) CreateTrdDriver(ctx context.Context, arg CreateTrdDriverParams) (TrdDriver, error) {
	row := q.db.QueryRowContext(ctx, createTrdDriver, arg.TrdRecordno, arg.TrdDrivertype, arg.TrdDrivercode)
	var i TrdDriver
	err := row.Scan(&i.TrdRecordno, &i.TrdDrivertype, &i.TrdDrivercode)
	return i, err
}

const createTrdEvent = `-- name: CreateTrdEvent :one
insert into trd_event (trd_recordno, 
                       trd_eventtype, 
                       trd_eventdate, 
                       trd_eventdateto, 
                       trd_entrydatetime, 
                       trd_eventcode,
                       trd_exceptiontype, 
                       trd_expirydate)
values ($1,$2, $3, $4, $5, $6, $7, $8)
RETURNING trd_recordno, trd_eventtype, trd_eventdate, trd_eventdateto, trd_entrydatetime, trd_eventcode, trd_exceptiontype, trd_expirydate
`

type CreateTrdEventParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	TrdEventtype     string `json:"trd_eventtype"`
	TrdEventdate     string `json:"trd_eventdate"`
	TrdEventdateto   string `json:"trd_eventdateto"`
	TrdEntrydatetime string `json:"trd_entrydatetime"`
	TrdEventcode     string `json:"trd_eventcode"`
	TrdExceptiontype string `json:"trd_exceptiontype"`
	TrdExpirydate    string `json:"trd_expirydate"`
}

func (q *Queries) CreateTrdEvent(ctx context.Context, arg CreateTrdEventParams) (TrdEvent, error) {
	row := q.db.QueryRowContext(ctx, createTrdEvent,
		arg.TrdRecordno,
		arg.TrdEventtype,
		arg.TrdEventdate,
		arg.TrdEventdateto,
		arg.TrdEntrydatetime,
		arg.TrdEventcode,
		arg.TrdExceptiontype,
		arg.TrdExpirydate,
	)
	var i TrdEvent
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdEventtype,
		&i.TrdEventdate,
		&i.TrdEventdateto,
		&i.TrdEntrydatetime,
		&i.TrdEventcode,
		&i.TrdExceptiontype,
		&i.TrdExpirydate,
	)
	return i, err
}

const createTrdEventNarrative = `-- name: CreateTrdEventNarrative :one
insert into trd_event_narrative (trd_recordno, 
                                 trd_narrative_code, 
                                 trd_seqno, 
                                 trd_narrative)
values ($1,$2, $3, $4)
RETURNING trd_recordno, trd_narrative_code, trd_seqno, trd_narrative
`

type CreateTrdEventNarrativeParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	TrdNarrativeCode string `json:"trd_narrative_code"`
	TrdSeqno         string `json:"trd_seqno"`
	TrdNarrative     string `json:"trd_narrative"`
}

func (q *Queries) CreateTrdEventNarrative(ctx context.Context, arg CreateTrdEventNarrativeParams) (TrdEventNarrative, error) {
	row := q.db.QueryRowContext(ctx, createTrdEventNarrative,
		arg.TrdRecordno,
		arg.TrdNarrativeCode,
		arg.TrdSeqno,
		arg.TrdNarrative,
	)
	var i TrdEventNarrative
	err := row.Scan(
		&i.TrdRecordno,
		&i.TrdNarrativeCode,
		&i.TrdSeqno,
		&i.TrdNarrative,
	)
	return i, err
}

const createTrdExternalRef = `-- name: CreateTrdExternalRef :one
insert into trd_external_ref (trd_recordno,
                              ext_ref_extreftype, 
                              ext_ref_extref)
values ($1,$2, $3)
RETURNING trd_recordno, ext_ref_extreftype, ext_ref_extref
`

type CreateTrdExternalRefParams struct {
	TrdRecordno      int32  `json:"trd_recordno"`
	ExtRefExtreftype string `json:"ext_ref_extreftype"`
	ExtRefExtref     string `json:"ext_ref_extref"`
}

func (q *Queries) CreateTrdExternalRef(ctx context.Context, arg CreateTrdExternalRefParams) (TrdExternalRef, error) {
	row := q.db.QueryRowContext(ctx, createTrdExternalRef, arg.TrdRecordno, arg.ExtRefExtreftype, arg.ExtRefExtref)
	var i TrdExternalRef
	err := row.Scan(&i.TrdRecordno, &i.ExtRefExtreftype, &i.ExtRefExtref)
	return i, err
}

const getTrade = `-- name: GetTrade :one
SELECT trd_uuid, trd_recordno, trd_glosstraderef, trd_versiono, trd_origin, trd_tradetype, trd_settlementstatus, trd_tradestatus, trd_originversion
FROM trd_trade
WHERE trd_recordno = $1
ORDER BY trd_recordno
LIMIT 1
`

func (q *Queries) GetTrade(ctx context.Context, trdRecordno int32) (TrdTrade, error) {
	row := q.db.QueryRowContext(ctx, getTrade, trdRecordno)
	var i TrdTrade
	err := row.Scan(
		&i.TrdUuid,
		&i.TrdRecordno,
		&i.TrdGlosstraderef,
		&i.TrdVersiono,
		&i.TrdOrigin,
		&i.TrdTradetype,
		&i.TrdSettlementstatus,
		&i.TrdTradestatus,
		&i.TrdOriginversion,
	)
	return i, err
}

const listAllTrades = `-- name: ListAllTrades :many
SELECT trd_uuid, trd_recordno, trd_glosstraderef, trd_versiono, trd_origin, trd_tradetype, trd_settlementstatus, trd_tradestatus, trd_originversion
FROM trd_trade
ORDER BY trd_recordno
LIMIT 1000
`

func (q *Queries) ListAllTrades(ctx context.Context) ([]TrdTrade, error) {
	rows, err := q.db.QueryContext(ctx, listAllTrades)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdTrade{}
	for rows.Next() {
		var i TrdTrade
		if err := rows.Scan(
			&i.TrdUuid,
			&i.TrdRecordno,
			&i.TrdGlosstraderef,
			&i.TrdVersiono,
			&i.TrdOrigin,
			&i.TrdTradetype,
			&i.TrdSettlementstatus,
			&i.TrdTradestatus,
			&i.TrdOriginversion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeAmount = `-- name: ListTradeAmount :many
SELECT trd_recordno, trd_charge_levy_type_p2k, trd_charge_levy_instr_p2k, trd_charge_discount_wil, trd_charge_levy_qty_p2k, trd_charge_levyrate_p2k
FROM trd_amount
`

func (q *Queries) ListTradeAmount(ctx context.Context) ([]TrdAmount, error) {
	rows, err := q.db.QueryContext(ctx, listTradeAmount)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdAmount{}
	for rows.Next() {
		var i TrdAmount
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdChargeLevyTypeP2k,
			&i.TrdChargeLevyInstrP2k,
			&i.TrdChargeDiscountWil,
			&i.TrdChargeLevyQtyP2k,
			&i.TrdChargeLevyrateP2k,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeCode = `-- name: ListTradeCode :many
SELECT trd_recordno, trd_ext, trd_radeclass, trd_radecode
FROM trd_trade_code
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeCode(ctx context.Context, trdRecordno int32) ([]TrdTradeCode, error) {
	rows, err := q.db.QueryContext(ctx, listTradeCode, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdTradeCode{}
	for rows.Next() {
		var i TrdTradeCode
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdExt,
			&i.TrdRadeclass,
			&i.TrdRadecode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeDriver = `-- name: ListTradeDriver :many
SELECT trd_recordno, trd_drivertype, trd_drivercode
FROM trd_driver
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeDriver(ctx context.Context, trdRecordno int32) ([]TrdDriver, error) {
	rows, err := q.db.QueryContext(ctx, listTradeDriver, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdDriver{}
	for rows.Next() {
		var i TrdDriver
		if err := rows.Scan(&i.TrdRecordno, &i.TrdDrivertype, &i.TrdDrivercode); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeEvent = `-- name: ListTradeEvent :many
SELECT trd_recordno, trd_eventtype, trd_eventdate, trd_eventdateto, trd_entrydatetime, trd_eventcode, trd_exceptiontype, trd_expirydate
FROM trd_event
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeEvent(ctx context.Context, trdRecordno int32) ([]TrdEvent, error) {
	rows, err := q.db.QueryContext(ctx, listTradeEvent, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdEvent{}
	for rows.Next() {
		var i TrdEvent
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdEventtype,
			&i.TrdEventdate,
			&i.TrdEventdateto,
			&i.TrdEntrydatetime,
			&i.TrdEventcode,
			&i.TrdExceptiontype,
			&i.TrdExpirydate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeEventNarrative = `-- name: ListTradeEventNarrative :many
SELECT trd_recordno, trd_narrative_code, trd_seqno, trd_narrative
FROM trd_event_narrative
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeEventNarrative(ctx context.Context, trdRecordno int32) ([]TrdEventNarrative, error) {
	rows, err := q.db.QueryContext(ctx, listTradeEventNarrative, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdEventNarrative{}
	for rows.Next() {
		var i TrdEventNarrative
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdNarrativeCode,
			&i.TrdSeqno,
			&i.TrdNarrative,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeExternalRef = `-- name: ListTradeExternalRef :many
SELECT trd_recordno, ext_ref_extreftype, ext_ref_extref
FROM trd_external_ref
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeExternalRef(ctx context.Context, trdRecordno int32) ([]TrdExternalRef, error) {
	rows, err := q.db.QueryContext(ctx, listTradeExternalRef, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdExternalRef{}
	for rows.Next() {
		var i TrdExternalRef
		if err := rows.Scan(&i.TrdRecordno, &i.ExtRefExtreftype, &i.ExtRefExtref); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeInstExt = `-- name: ListTradeInstExt :many
SELECT trd_recordno, trd_service, trd_extref
FROM trd_inst_ext
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeInstExt(ctx context.Context, trdRecordno int32) ([]TrdInstExt, error) {
	rows, err := q.db.QueryContext(ctx, listTradeInstExt, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdInstExt{}
	for rows.Next() {
		var i TrdInstExt
		if err := rows.Scan(&i.TrdRecordno, &i.TrdService, &i.TrdExtref); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeInstruction = `-- name: ListTradeInstruction :many
SELECT trd_recordno, trd_procaction, trd_destination, trd_procstatus, trd_recordidentifier, trd_recordversion, trd_instformat, trd_tradeparty, trd_partyref, trd_deliverytype, trd_addresscode, trd_servicestatus, trd_noofcopies, trd_duedatetime
FROM trd_instruction
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeInstruction(ctx context.Context, trdRecordno int32) ([]TrdInstruction, error) {
	rows, err := q.db.QueryContext(ctx, listTradeInstruction, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdInstruction{}
	for rows.Next() {
		var i TrdInstruction
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdProcaction,
			&i.TrdDestination,
			&i.TrdProcstatus,
			&i.TrdRecordidentifier,
			&i.TrdRecordversion,
			&i.TrdInstformat,
			&i.TrdTradeparty,
			&i.TrdPartyref,
			&i.TrdDeliverytype,
			&i.TrdAddresscode,
			&i.TrdServicestatus,
			&i.TrdNoofcopies,
			&i.TrdDuedatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeInstructionEffect = `-- name: ListTradeInstructionEffect :many
SELECT trd_recordno, trd_eventtype, trd_eventdate, trd_eventdateto, trd_entrydatetime, trd_eventcode, trd_exceptiontype, trd_expirydate
FROM trd_instruction_effect
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeInstructionEffect(ctx context.Context, trdRecordno int32) ([]TrdInstructionEffect, error) {
	rows, err := q.db.QueryContext(ctx, listTradeInstructionEffect, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdInstructionEffect{}
	for rows.Next() {
		var i TrdInstructionEffect
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdEventtype,
			&i.TrdEventdate,
			&i.TrdEventdateto,
			&i.TrdEntrydatetime,
			&i.TrdEventcode,
			&i.TrdExceptiontype,
			&i.TrdExpirydate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeInstrument = `-- name: ListTradeInstrument :many
SELECT trd_recordno, trd_instrtype, trd_p2000instrref, trd_instrreftype, trd_instrref, trd_longname, trd_quantity
FROM trd_instrument
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeInstrument(ctx context.Context, trdRecordno int32) ([]TrdInstrument, error) {
	rows, err := q.db.QueryContext(ctx, listTradeInstrument, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdInstrument{}
	for rows.Next() {
		var i TrdInstrument
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdInstrtype,
			&i.TrdP2000instrref,
			&i.TrdInstrreftype,
			&i.TrdInstrref,
			&i.TrdLongname,
			&i.TrdQuantity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeJournal = `-- name: ListTradeJournal :many
SELECT trd_recordno, trd_accounts_company, trd_journal_type, trd_posting_type, trd_journal_no, trd_procaction
FROM trd_journal
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeJournal(ctx context.Context, trdRecordno int32) ([]TrdJournal, error) {
	rows, err := q.db.QueryContext(ctx, listTradeJournal, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdJournal{}
	for rows.Next() {
		var i TrdJournal
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdAccountsCompany,
			&i.TrdJournalType,
			&i.TrdPostingType,
			&i.TrdJournalNo,
			&i.TrdProcaction,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeLink = `-- name: ListTradeLink :many
SELECT trd_recordno, trd_link_type_wil, trd_main_record_no_wil, trd_sub_recordno_wil, trd_link_qty_wil, trd_link_status_wil
FROM trd_link
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeLink(ctx context.Context, trdRecordno int32) ([]TrdLink, error) {
	rows, err := q.db.QueryContext(ctx, listTradeLink, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdLink{}
	for rows.Next() {
		var i TrdLink
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdLinkTypeWil,
			&i.TrdMainRecordNoWil,
			&i.TrdSubRecordnoWil,
			&i.TrdLinkQtyWil,
			&i.TrdLinkStatusWil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeNarrative = `-- name: ListTradeNarrative :many
SELECT trd_recordno, trd_narrative_code, trd_seqno, trd_narrative
FROM trd_trade_narrative
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeNarrative(ctx context.Context, trdRecordno int32) ([]TrdTradeNarrative, error) {
	rows, err := q.db.QueryContext(ctx, listTradeNarrative, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdTradeNarrative{}
	for rows.Next() {
		var i TrdTradeNarrative
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdNarrativeCode,
			&i.TrdSeqno,
			&i.TrdNarrative,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeParty = `-- name: ListTradeParty :many
SELECT trd_recordno, trd_trade_party, trd_partyref, trd_partyref_type_text, trd_ext_partyref, trd_longname
FROM trd_party
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeParty(ctx context.Context, trdRecordno int32) ([]TrdParty, error) {
	rows, err := q.db.QueryContext(ctx, listTradeParty, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdParty{}
	for rows.Next() {
		var i TrdParty
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdTradeParty,
			&i.TrdPartyref,
			&i.TrdPartyrefTypeText,
			&i.TrdExtPartyref,
			&i.TrdLongname,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradePartyDriver = `-- name: ListTradePartyDriver :many
SELECT trd_recordno, trd_trade_party, trd_driver_type, trd_driver_code
FROM trd_party_driver
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradePartyDriver(ctx context.Context, trdRecordno int32) ([]TrdPartyDriver, error) {
	rows, err := q.db.QueryContext(ctx, listTradePartyDriver, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdPartyDriver{}
	for rows.Next() {
		var i TrdPartyDriver
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdTradeParty,
			&i.TrdDriverType,
			&i.TrdDriverCode,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeProcessing = `-- name: ListTradeProcessing :many
SELECT trd_recordno, trd_proc_alias, trd_proc_action, trd_due_datetime, trd_done_datetime
FROM trd_processing
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeProcessing(ctx context.Context, trdRecordno int32) ([]TrdProcessing, error) {
	rows, err := q.db.QueryContext(ctx, listTradeProcessing, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdProcessing{}
	for rows.Next() {
		var i TrdProcessing
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdProcAlias,
			&i.TrdProcAction,
			&i.TrdDueDatetime,
			&i.TrdDoneDatetime,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeProcessingEvent = `-- name: ListTradeProcessingEvent :many
SELECT trd_recordno, trd_eventtype, trd_eventdate, trd_eventdateto, trd_entrydatetime, trd_eventcode, trd_exceptiontype, trd_expirydate
FROM trd_processing_event
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeProcessingEvent(ctx context.Context, trdRecordno int32) ([]TrdProcessingEvent, error) {
	rows, err := q.db.QueryContext(ctx, listTradeProcessingEvent, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdProcessingEvent{}
	for rows.Next() {
		var i TrdProcessingEvent
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdEventtype,
			&i.TrdEventdate,
			&i.TrdEventdateto,
			&i.TrdEntrydatetime,
			&i.TrdEventcode,
			&i.TrdExceptiontype,
			&i.TrdExpirydate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeRate = `-- name: ListTradeRate :many
SELECT trd_recordno, trd_charge_levy_type, trd_actual_charge, trd_amount_type, trd_rate_instrref_type, trd_rate_instrref, trd_rate_instrid, trd_rate_entered, trd_charge_rate, trd_mult_divind
FROM trd_rate
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeRate(ctx context.Context, trdRecordno int32) ([]TrdRate, error) {
	rows, err := q.db.QueryContext(ctx, listTradeRate, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdRate{}
	for rows.Next() {
		var i TrdRate
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdChargeLevyType,
			&i.TrdActualCharge,
			&i.TrdAmountType,
			&i.TrdRateInstrrefType,
			&i.TrdRateInstrref,
			&i.TrdRateInstrid,
			&i.TrdRateEntered,
			&i.TrdChargeRate,
			&i.TrdMultDivind,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeRefDate = `-- name: ListTradeRefDate :many
SELECT trd_recordno, datetype, datewil, refdatetime, dateversionuser
FROM trd_ref_date
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeRefDate(ctx context.Context, trdRecordno int32) ([]TrdRefDate, error) {
	rows, err := q.db.QueryContext(ctx, listTradeRefDate, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdRefDate{}
	for rows.Next() {
		var i TrdRefDate
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.Datetype,
			&i.Datewil,
			&i.Refdatetime,
			&i.Dateversionuser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTradeSettlement = `-- name: ListTradeSettlement :many
SELECT trd_recordno, trd_deliverytype, trd_settleeventinstr, trd_settleterms, trd_originalqty, trd_openqty, trd_settledate, trd_delrecind, trd_settlestatus, trd_tradestatus, trd_settlenarrative1, trd_settlenarrative2, trd_settlenarrative3, trd_settlenarrative4, trd_settlenarrative5, trd_settlenarrative6, trd_settlenarrative7, trd_settlenarrative8, trd_dompaliaswil, trd_dompaliasdesc, trd_dompdepottypewil, trd_dompdaccwil, trd_dompservicewil, trd_secpaliaswil, trd_secpservicewil
FROM trd_settlement
WHERE trd_recordno = $1
ORDER BY trd_recordno
`

func (q *Queries) ListTradeSettlement(ctx context.Context, trdRecordno int32) ([]TrdSettlement, error) {
	rows, err := q.db.QueryContext(ctx, listTradeSettlement, trdRecordno)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdSettlement{}
	for rows.Next() {
		var i TrdSettlement
		if err := rows.Scan(
			&i.TrdRecordno,
			&i.TrdDeliverytype,
			&i.TrdSettleeventinstr,
			&i.TrdSettleterms,
			&i.TrdOriginalqty,
			&i.TrdOpenqty,
			&i.TrdSettledate,
			&i.TrdDelrecind,
			&i.TrdSettlestatus,
			&i.TrdTradestatus,
			&i.TrdSettlenarrative1,
			&i.TrdSettlenarrative2,
			&i.TrdSettlenarrative3,
			&i.TrdSettlenarrative4,
			&i.TrdSettlenarrative5,
			&i.TrdSettlenarrative6,
			&i.TrdSettlenarrative7,
			&i.TrdSettlenarrative8,
			&i.TrdDompaliaswil,
			&i.TrdDompaliasdesc,
			&i.TrdDompdepottypewil,
			&i.TrdDompdaccwil,
			&i.TrdDompservicewil,
			&i.TrdSecpaliaswil,
			&i.TrdSecpservicewil,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTrades = `-- name: ListTrades :many
SELECT trd_uuid, trd_recordno, trd_glosstraderef, trd_versiono, trd_origin, trd_tradetype, trd_settlementstatus, trd_tradestatus, trd_originversion
FROM trd_trade
WHERE trd_versiono = $1
ORDER BY trd_recordno
LIMIT $2 OFFSET $3
`

type ListTradesParams struct {
	TrdVersiono int32 `json:"trd_versiono"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

func (q *Queries) ListTrades(ctx context.Context, arg ListTradesParams) ([]TrdTrade, error) {
	rows, err := q.db.QueryContext(ctx, listTrades, arg.TrdVersiono, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TrdTrade{}
	for rows.Next() {
		var i TrdTrade
		if err := rows.Scan(
			&i.TrdUuid,
			&i.TrdRecordno,
			&i.TrdGlosstraderef,
			&i.TrdVersiono,
			&i.TrdOrigin,
			&i.TrdTradetype,
			&i.TrdSettlementstatus,
			&i.TrdTradestatus,
			&i.TrdOriginversion,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const tradesView = `-- name: TradesView :many
SELECT trd_uuid, trd_recordno, trd_glosstraderef, trd_versiono, trd_origin, trd_tradetype, trd_settlementstatus, trd_tradestatus, trd_originversion, trd_accounts_company, trd_journal_no FROM trades
`

func (q *Queries) TradesView(ctx context.Context) ([]Trade, error) {
	rows, err := q.db.QueryContext(ctx, tradesView)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Trade{}
	for rows.Next() {
		var i Trade
		if err := rows.Scan(
			&i.TrdUuid,
			&i.TrdRecordno,
			&i.TrdGlosstraderef,
			&i.TrdVersiono,
			&i.TrdOrigin,
			&i.TrdTradetype,
			&i.TrdSettlementstatus,
			&i.TrdTradestatus,
			&i.TrdOriginversion,
			&i.TrdAccountsCompany,
			&i.TrdJournalNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
