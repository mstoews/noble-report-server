// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: gl_fund.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createFund = `-- name: CreateFund :one
insert into gl_funds (fund, description, create_date, create_user)
values ( $1, $2, $3, $4 ) RETURNING fund, description, create_date, create_user
`

type CreateFundParams struct {
	Fund        string      `json:"fund"`
	Description pgtype.Text `json:"description"`
	CreateDate  pgtype.Date `json:"create_date"`
	CreateUser  pgtype.Text `json:"create_user"`
}

func (q *Queries) CreateFund(ctx context.Context, arg CreateFundParams) (GlFund, error) {
	row := q.db.QueryRow(ctx, createFund,
		arg.Fund,
		arg.Description,
		arg.CreateDate,
		arg.CreateUser,
	)
	var i GlFund
	err := row.Scan(
		&i.Fund,
		&i.Description,
		&i.CreateDate,
		&i.CreateUser,
	)
	return i, err
}

const getFund = `-- name: GetFund :one
SELECT fund, description, create_date, create_user FROM gl_funds
WHERE fund = $1
ORDER BY 1
LIMIT 10000
`

func (q *Queries) GetFund(ctx context.Context, fund string) (GlFund, error) {
	row := q.db.QueryRow(ctx, getFund, fund)
	var i GlFund
	err := row.Scan(
		&i.Fund,
		&i.Description,
		&i.CreateDate,
		&i.CreateUser,
	)
	return i, err
}

const listFunds = `-- name: ListFunds :many
SELECT fund, description, create_date, create_user from gl_funds order by 1,2
LIMIT 10000
`

func (q *Queries) ListFunds(ctx context.Context) ([]GlFund, error) {
	rows, err := q.db.Query(ctx, listFunds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GlFund{}
	for rows.Next() {
		var i GlFund
		if err := rows.Scan(
			&i.Fund,
			&i.Description,
			&i.CreateDate,
			&i.CreateUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFund = `-- name: UpdateFund :one
UPDATE gl_funds set 
fund = $1, 
description = $2, 
create_date = $3,
create_user = $4 
where fund = $1 
RETURNING fund, description, create_date, create_user
`

type UpdateFundParams struct {
	Fund        string      `json:"fund"`
	Description pgtype.Text `json:"description"`
	CreateDate  pgtype.Date `json:"create_date"`
	CreateUser  pgtype.Text `json:"create_user"`
}

func (q *Queries) UpdateFund(ctx context.Context, arg UpdateFundParams) (GlFund, error) {
	row := q.db.QueryRow(ctx, updateFund,
		arg.Fund,
		arg.Description,
		arg.CreateDate,
		arg.CreateUser,
	)
	var i GlFund
	err := row.Scan(
		&i.Fund,
		&i.Description,
		&i.CreateDate,
		&i.CreateUser,
	)
	return i, err
}
