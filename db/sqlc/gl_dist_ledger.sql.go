// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: gl_dist_ledger.sql

package db

import (
	"context"
)

const listDistLedger = `-- name: ListDistLedger :many
SELECT account, child, period, description, opening_balance, debit_balance, credit_balance, closing_balance, update_date, created_user
FROM gl_distribution_ledger
ORDER BY 3,1,2
LIMIT 10000
`

func (q *Queries) ListDistLedger(ctx context.Context) ([]GlDistributionLedger, error) {
	rows, err := q.db.QueryContext(ctx, listDistLedger)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GlDistributionLedger{}
	for rows.Next() {
		var i GlDistributionLedger
		if err := rows.Scan(
			&i.Account,
			&i.Child,
			&i.Period,
			&i.Description,
			&i.OpeningBalance,
			&i.DebitBalance,
			&i.CreditBalance,
			&i.ClosingBalance,
			&i.UpdateDate,
			&i.CreatedUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getDistLedgerByRef = `-- name: getDistLedgerByRef :one
SELECT account, child, period, description, opening_balance, debit_balance, credit_balance, closing_balance, update_date, created_user
FROM gl_distribution_ledger WHERE account = $1 and child = $2 and period = $3 
ORDER BY 3,1,2
`

type getDistLedgerByRefParams struct {
	Account int32 `json:"account"`
	Child   int32 `json:"child"`
	Period  int32 `json:"period"`
}

func (q *Queries) getDistLedgerByRef(ctx context.Context, arg getDistLedgerByRefParams) (GlDistributionLedger, error) {
	row := q.db.QueryRowContext(ctx, getDistLedgerByRef, arg.Account, arg.Child, arg.Period)
	var i GlDistributionLedger
	err := row.Scan(
		&i.Account,
		&i.Child,
		&i.Period,
		&i.Description,
		&i.OpeningBalance,
		&i.DebitBalance,
		&i.CreditBalance,
		&i.ClosingBalance,
		&i.UpdateDate,
		&i.CreatedUser,
	)
	return i, err
}
