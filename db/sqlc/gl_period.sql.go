// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: gl_period.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPeriod = `-- name: CreatePeriod :one
INSERT into gl_period (period_id, period_year, start_date, end_date, description, create_date, create_user, update_date, update_user)
values ( 
    $1, $2, $3, $4, $5, $6, $7, $8, $9  
) RETURNING period_id, period_year, start_date, end_date, description, create_date, create_user, update_date, update_user
`

type CreatePeriodParams struct {
	PeriodID    int32       `json:"period_id"`
	PeriodYear  int32       `json:"period_year"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Description pgtype.Text `json:"description"`
	CreateDate  pgtype.Date `json:"create_date"`
	CreateUser  pgtype.Text `json:"create_user"`
	UpdateDate  pgtype.Date `json:"update_date"`
	UpdateUser  pgtype.Text `json:"update_user"`
}

func (q *Queries) CreatePeriod(ctx context.Context, arg CreatePeriodParams) (GlPeriod, error) {
	row := q.db.QueryRow(ctx, createPeriod,
		arg.PeriodID,
		arg.PeriodYear,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
		arg.CreateDate,
		arg.CreateUser,
		arg.UpdateDate,
		arg.UpdateUser,
	)
	var i GlPeriod
	err := row.Scan(
		&i.PeriodID,
		&i.PeriodYear,
		&i.StartDate,
		&i.EndDate,
		&i.Description,
		&i.CreateDate,
		&i.CreateUser,
		&i.UpdateDate,
		&i.UpdateUser,
	)
	return i, err
}

const listPeriods = `-- name: ListPeriods :many
SELECT period_id, period_year, start_date, end_date, description, create_date, create_user, update_date, update_user FROM gl_period order by 1, 2
`

func (q *Queries) ListPeriods(ctx context.Context) ([]GlPeriod, error) {
	rows, err := q.db.Query(ctx, listPeriods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GlPeriod{}
	for rows.Next() {
		var i GlPeriod
		if err := rows.Scan(
			&i.PeriodID,
			&i.PeriodYear,
			&i.StartDate,
			&i.EndDate,
			&i.Description,
			&i.CreateDate,
			&i.CreateUser,
			&i.UpdateDate,
			&i.UpdateUser,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePeriod = `-- name: UpdatePeriod :one
UPDATE gl_period set
period_id = $1,
period_year = $2, 
start_date = $3, 
end_date = $4, 
description = $5, 
create_date = $6, 
create_user = $7, 
update_date = $8, 
update_user = $9
where period_id = $1 and period_year = $2
RETURNING period_id, period_year, start_date, end_date, description, create_date, create_user, update_date, update_user
`

type UpdatePeriodParams struct {
	PeriodID    int32       `json:"period_id"`
	PeriodYear  int32       `json:"period_year"`
	StartDate   pgtype.Date `json:"start_date"`
	EndDate     pgtype.Date `json:"end_date"`
	Description pgtype.Text `json:"description"`
	CreateDate  pgtype.Date `json:"create_date"`
	CreateUser  pgtype.Text `json:"create_user"`
	UpdateDate  pgtype.Date `json:"update_date"`
	UpdateUser  pgtype.Text `json:"update_user"`
}

func (q *Queries) UpdatePeriod(ctx context.Context, arg UpdatePeriodParams) (GlPeriod, error) {
	row := q.db.QueryRow(ctx, updatePeriod,
		arg.PeriodID,
		arg.PeriodYear,
		arg.StartDate,
		arg.EndDate,
		arg.Description,
		arg.CreateDate,
		arg.CreateUser,
		arg.UpdateDate,
		arg.UpdateUser,
	)
	var i GlPeriod
	err := row.Scan(
		&i.PeriodID,
		&i.PeriodYear,
		&i.StartDate,
		&i.EndDate,
		&i.Description,
		&i.CreateDate,
		&i.CreateUser,
		&i.UpdateDate,
		&i.UpdateUser,
	)
	return i, err
}
